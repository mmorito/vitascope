---
description: 
globs: 
alwaysApply: true
---
# Vitascope プロジェクトルール

このファイルは、Cursorエディタで使用するプロジェクトルールを定義します。プロジェクト全体の開発規約とガイドラインについては、`docs/`ディレクトリを参照してください。

## ドキュメント構造

プロジェクトドキュメントは以下のディレクトリ構造で整理されています：

```
docs/
├── README.md (全体概要)
├── project/
│   ├── inception-deck.md (プロジェクト計画)
│   ├── design-doc.md (設計ドキュメント)
│   ├── functional-spec.md (機能仕様)
│   ├── data-model.md (データモデル)
│   ├── data-model-design.md (データモデル設計)
│   ├── fhir-data-model.md (FHIRデータモデル)
│   ├── ui-ux-design.md (UIとUXデザイン)
│   └── external-data-sources.md (外部データソース)
├── architecture/
│   ├── backend.md (DDDアーキテクチャ)
│   ├── frontend.md (FSD構造)
│   └── infrastructure.md (AWS構成)
├── development/
│   ├── api-guidelines.md (API設計ガイド)
│   ├── coding-standards.md (コード規約)
│   ├── standards/
│   │   ├── backend-coding-rule.md (バックエンド詳細規約)
│   │   └── frontend-coding-rule.md (フロントエンド詳細規約)
│   └── workflow.md (開発フロー)
└── operations/
    ├── security.md (セキュリティポリシー)
    └── monitoring.md (監視と運用)
```

## プロジェクト概要

Vitascope は、社会生活者のライフメトリクスと医療ログを統合し、新たな医療インサイトを提供するプラットフォームです。このリポジトリは PHR（Personal Health Record）アプリの開発・管理を行います。

## 主要原則

### 1. ユーザー中心設計
- ユーザー（患者、医療従事者）のニーズを常に最優先
- アクセシビリティとユーザビリティを重視
- 定期的なユーザーテストとフィードバックの収集

### 2. データセキュリティとプライバシー
- HIPAA、GDPR など関連法規制の厳守
- ゼロトラスト原則に基づいたセキュリティ設計
- 最小限のデータ収集とデータの匿名化
- エンドツーエンド暗号化の実装

### 3. スケーラビリティと拡張性
- マイクロサービスアーキテクチャの採用
- クラウドネイティブな設計
- API 駆動開発

### 4. 品質と信頼性
- テスト駆動開発（TDD）の実践
- 継続的インテグレーション/継続的デリバリー（CI/CD）
- 包括的な自動テスト（単体、統合、E2E）
- 徹底したコードレビュー

## アーキテクチャ概要

- **バックエンド**: Domain-Driven Design (DDD)アーキテクチャ
- **フロントエンド**: Feature-Sliced Design (FSD)アーキテクチャ
- **インフラストラクチャ**: AWS サービスベース

## 技術スタック

### バックエンド
- **言語**: Python 3.9+
- **フレームワーク**: FastAPI
- **ORM**: SQLModel
- **データベース**: PostgreSQL（JSONB対応）
- **認証**: Amazon Cognito

### フロントエンド
- **フレームワーク**: React Native
- **開発環境**: Expo
- **状態管理**: Redux Toolkit
- **スタイリング**: NativeWind

## コーディング規約

### 共通ルール
- コードレビューは必須
- 単体テストが書かれていること
- コメントは日本語で記載すること
- 複雑なロジックには必ずコメントを追加すること

### バックエンド固有ルール
- DDDの原則に従う
- 型ヒントを必ず使用する
- 関数やクラスにはdocstringを追加する
- インデントは4スペース
- 行の最大長は88文字

### フロントエンド固有ルール
- FSDの原則に従う
- TypeScriptの型定義を適切に使用する
- コンポーネントは関数コンポーネントで実装する
- インデントは2スペース
- 行の最大長は100文字

## 開発プロセス

1. 機能開発は必ずブランチを切って行う
2. コミットメッセージはプレフィックスをつける（feat:, fix:, docs:, etc）
3. PRは少なくとも1人のレビューを経てからマージする
4. CI/CDパイプラインの全テストが通過していること

## セキュリティ要件

- 機密情報（認証情報、APIキーなど）はソースコードに直接記述しない
- 個人医療情報（PHI）は常に暗号化して保存する
- 権限チェックは厳密に行う
- 入力値の検証は必ず行う

## パフォーマンス要件

- APIレスポンスタイムは平均500ms以下を目標とする
- アプリの初期ロード時間は3秒以下を目標とする
- 大量データの取得はページネーションを実装する
- N+1問題を回避する設計を行う